import type { CollectionBeforeChangeHook } from 'payload'
import type { Order, User, Customer } from '../../../../payload-types'
import type { PaginatedDocs } from 'payload'

export const assignCustomer: CollectionBeforeChangeHook<Order> = async ({
  data,
  req: { payload, user },
}) => {
  if (data.customer) return data // Customer already assigned

  // For online orders, try to find customer by logged-in user
  if (data.orderType === 'online' && user) {
    const typedUser = user as User
    if (!typedUser.email) return data

    const customers: PaginatedDocs<Customer> = await payload.find({
      collection: 'customers',
      where: {
        'email': {
          equals: typedUser.email,
        },
      },
      limit: 1,
      depth: 0,
    })

    if (customers.docs.length > 0 && customers.docs[0]) {
      return {
        ...data,
        customer: customers.docs[0].id,
      }
    }

    // If no customer found for user, create one
    // Note: customerNumber will be auto-generated by the customer collection hooks
    const newCustomer = await payload.create({
      collection: 'customers',
      data: {
        name: typedUser.name || typedUser.email,
        email: typedUser.email,
        customerType: 'retail',
        customerNumber: 'TMP', // Will be replaced by generateCustomerNumber hook
      },
    })

    return {
      ...data,
      customer: newCustomer.id,
    }
  }

  return data // For in-store/phone orders, customer should be selected manually
}
